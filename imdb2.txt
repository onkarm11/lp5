

Classification using Deep neural network.Binary classification using Deep Neural Networks Example:

Classify movie reviews into positive" reviews and "negative" reviews, just based on the text content of the reviews. Use the IMDB dataset.

    import numpy as np
    from keras.datasets import imdb
    from keras import models
    from keras import layers

    # Load the IMDB dataset
    (train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)

    # Preprocessing the data
    def vectorize_sequences(sequences, dimension=10000):
        results = np.zeros((len(sequences), dimension))
        for i, sequence in enumerate(sequences):
            results[i, sequence] = 1.
        return results

    x_train = vectorize_sequences(train_data)
    x_test = vectorize_sequences(test_data)

    y_train = np.asarray(train_labels).astype('float32')
    y_test = np.asarray(test_labels).astype('float32')

    # Define the model
    model = models.Sequential()
    model.add(layers.Dense(16, activation='relu', input_shape=(10000,)))
    model.add(layers.Dense(16, activation='relu'))
    model.add(layers.Dense(1, activation='sigmoid'))

    C:\Python\lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
      super().__init__(activity_regularizer=activity_regularizer, **kwargs)

    # Compile the model
    model.compile(optimizer='rmsprop',
                  loss='binary_crossentropy',
                  metrics=['accuracy'])

    # Validation set
    x_val = x_train[:10000]
    partial_x_train = x_train[10000:]
    y_val = y_train[:10000]
    partial_y_train = y_train[10000:]

    # Train the model
    history = model.fit(partial_x_train,
                        partial_y_train,
                        epochs=20,
                        batch_size=512,
                        validation_data=(x_val, y_val))

    Epoch 1/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 7s 140ms/step - accuracy: 0.6863 - loss: 0.6082 - val_accuracy: 0.8639 - val_loss: 0.4170
    Epoch 2/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 23ms/step - accuracy: 0.8925 - loss: 0.3615 - val_accuracy: 0.8712 - val_loss: 0.3402
    Epoch 3/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 25ms/step - accuracy: 0.9157 - loss: 0.2629 - val_accuracy: 0.8717 - val_loss: 0.3114
    Epoch 4/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 23ms/step - accuracy: 0.9311 - loss: 0.2115 - val_accuracy: 0.8899 - val_loss: 0.2744
    Epoch 5/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 21ms/step - accuracy: 0.9477 - loss: 0.1691 - val_accuracy: 0.8832 - val_loss: 0.2919
    Epoch 6/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 22ms/step - accuracy: 0.9564 - loss: 0.1413 - val_accuracy: 0.8880 - val_loss: 0.2791
    Epoch 7/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 19ms/step - accuracy: 0.9690 - loss: 0.1143 - val_accuracy: 0.8864 - val_loss: 0.2888
    Epoch 8/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 24ms/step - accuracy: 0.9745 - loss: 0.0945 - val_accuracy: 0.8809 - val_loss: 0.3060
    Epoch 9/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 22ms/step - accuracy: 0.9818 - loss: 0.0762 - val_accuracy: 0.8736 - val_loss: 0.3605
    Epoch 10/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 21ms/step - accuracy: 0.9842 - loss: 0.0677 - val_accuracy: 0.8797 - val_loss: 0.3336
    Epoch 11/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 22ms/step - accuracy: 0.9899 - loss: 0.0519 - val_accuracy: 0.8773 - val_loss: 0.3554
    Epoch 12/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 20ms/step - accuracy: 0.9925 - loss: 0.0454 - val_accuracy: 0.8770 - val_loss: 0.3714
    Epoch 13/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 19ms/step - accuracy: 0.9943 - loss: 0.0356 - val_accuracy: 0.8768 - val_loss: 0.3921
    Epoch 14/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 26ms/step - accuracy: 0.9963 - loss: 0.0269 - val_accuracy: 0.8721 - val_loss: 0.4332
    Epoch 15/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 21ms/step - accuracy: 0.9948 - loss: 0.0286 - val_accuracy: 0.8593 - val_loss: 0.5370
    Epoch 16/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 23ms/step - accuracy: 0.9969 - loss: 0.0218 - val_accuracy: 0.8715 - val_loss: 0.4607
    Epoch 17/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 20ms/step - accuracy: 0.9967 - loss: 0.0198 - val_accuracy: 0.8714 - val_loss: 0.4782
    Epoch 18/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 22ms/step - accuracy: 0.9985 - loss: 0.0130 - val_accuracy: 0.8723 - val_loss: 0.4957
    Epoch 19/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 22ms/step - accuracy: 0.9997 - loss: 0.0085 - val_accuracy: 0.8724 - val_loss: 0.5080
    Epoch 20/20
    30/30 ━━━━━━━━━━━━━━━━━━━━ 1s 21ms/step - accuracy: 0.9999 - loss: 0.0063 - val_accuracy: 0.8658 - val_loss: 0.5633

    # Evaluate the model on test data
    results = model.evaluate(x_test, y_test)
    print("Test Loss:", results[0])
    print("Test Accuracy:", results[1])

    782/782 ━━━━━━━━━━━━━━━━━━━━ 3s 4ms/step - accuracy: 0.8534 - loss: 0.6221
    Test Loss: 0.612643301486969
    Test Accuracy: 0.8561199903488159
